const TelegramApi = require("node-telegram-bot-api")
const mongoose = require("mongoose");
const UserSchema = require('./models/UserSchema')
const express = require("express");
const axios = require("axios");
require('dotenv').config()
const token = "7405132392:AAE3O66Jup-OMx7seX8GRwsCj7mZYZCo6bw"
const dbURI = 'mongodb+srv://nsewerda04:soket775@cluster0.kkg0ems.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0'
const adminID = 6793605665;
const PORT = process.env.PORT || 3000;
const profitsChatId = -1002222723133;
const CuratorSchema = require('./models/curatorSchema')



const ourCuratorID = 5578275445;



let userState = {}

let escortAddModelMsgId = {

}

let new_model_escort = {

}




const bot = new TelegramApi(token, {polling: true});



const app = express()

app.get("/", async (req, res) => {
    res.send("Work!");
})

app.listen(PORT, ()=> {
    console.log('Server has been working')
})


mongoose.connect(dbURI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.log(err))




bot.onText(/\/start/, async (msg) => {
    userState = {}
    escortAddModelMsgId = {}
    new_model_escort = {}
    const chatId = msg.chat.id;
    const user = await UserSchema.findOne({id_user: msg.from.id})
    const replyKeyboard = {
        reply_markup: {
            keyboard: [
                [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'}, { text: 'üíã ESCORT'}],
                [{text: "–û –ø—Ä–æ–µ–∫—Ç–µ üßë‚Äçüíª"}]
            ],
            resize_keyboard: true, // –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–æ–ø–æ–∫
            one_time_keyboard: true // –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        }
    };
    let profile_text  = `<b>‚ö°Ô∏è –ü—Ä–æ—Ñ–∏–ª—å @${user.user_name}</b>\n` +
        `<b>üë§ ID: ${user.id_user}</b>\n\n` +
        `<b>üí≥ –í–∞—à –∫–æ—à–µ–ª—ë–∫</b>\n` +
        `‚îú –ë–∞–ª–∞–Ω—Å: ${user.balance}‚ÇΩ\n` +
        `‚îî –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: ${user.frozen_balance}‚ÇΩ\n\n` +
        `ü•≥–í–∞—à–∏ –ø—Ä–æ—Ñ–∏—Ç—ã\n` +
        `‚îó –°–¥–µ–ª–∞–Ω–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É ${user.profits}‚ÇΩ`
    await bot.sendMessage(chatId, "‚ö°", replyKeyboard)
    const curators = await CuratorSchema.find()
    let curator_is_added = false
    curators[0].users.forEach(user => {
        if (user.id_user === msg.from.id) {
            curator_is_added = true
        }
    })
    let buttons = []
    if (curator_is_added) {
        buttons = [
            [{text: "üí≤–û—Ñ–æ—Ä–º–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data: "make_payment"}],
            [{text: `–í–∞—à –∫—É—Ä–∞—Ç–æ—Ä - ${curators[0].name}`, callback_data: "my_curator"}]
        ]
    } else if (curator_is_added === false) {
        buttons = [
            [{text: "üí≤–û—Ñ–æ—Ä–º–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data: "make_payment"}],
            [{text: "üë®‚Äçüè´ –ù–∞–Ω—è—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞", callback_data: "add_curator"}]
        ]
    }
    await bot.sendMessage(chatId, profile_text, {parse_mode: "HTML", reply_markup: JSON.stringify({
            inline_keyboard: buttons
        })});
})

bot.onText('/curator', async (msg) => {
    const chatId = msg.chat.id;
    console.log(msg.from.id === ourCuratorID)
    if (msg.from.id === ourCuratorID) {
        const curators = await CuratorSchema.find()
        let usersText = '';
        if (curators[0].users.length > 0) {
            curators[0].users.forEach(user => {
                usersText = usersText + `@${user.user_name} (ID: ${user.id_user}) - ${user.profits}/5 –ø—Ä–æ—Ñ–∏—Ç–æ–≤\n`
            })
        } else if (curators[0].users.length <= 0) {
            usersText = "–£—á–µ–Ω–∏–∫–æ–≤ –Ω–µ—Ç—É üö´"
        }
        await bot.sendMessage(chatId, usersText, {parse_mode: "HTML", reply_markup: JSON.stringify({})})
    }


})

bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    if (msg.text === "üë§ –ü—Ä–æ—Ñ–∏–ª—å") {
        if (msg.from.username) {
            await UserSchema.updateOne({id_user: msg.from.id}, {
                $set: {
                    user_name: msg.from.username
                }
            })
        }
        const user = await UserSchema.findOne({id_user: msg.from.id})
        const curators = await CuratorSchema.find()
        let curator_is_added = false
        curators[0].users.forEach(user => {
            if (user.id_user === msg.from.id) {
                curator_is_added = true
            }
        })
        let buttons = []
        if (curator_is_added) {
            buttons = [
                [{text: "üí≤–û—Ñ–æ—Ä–º–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data: "make_payment"}],
                [{text: `–í–∞—à –∫—É—Ä–∞—Ç–æ—Ä - ${curators[0].name}`, callback_data: "my_curator"}]
            ]
        } else if (curator_is_added === false) {
            buttons = [
                [{text: "üí≤–û—Ñ–æ—Ä–º–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data: "make_payment"}],
                [{text: "üë®‚Äçüè´ –ù–∞–Ω—è—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞", callback_data: "add_curator"}]
            ]
        }
        let profile_text  = `<b>‚ö°Ô∏è –ü—Ä–æ—Ñ–∏–ª—å @${user.user_name}</b>\n` +
            `<b>üë§ ID: ${user.id_user}</b>\n\n` +
            `<b>üí≥ –í–∞—à –∫–æ—à–µ–ª—ë–∫</b>\n` +
            `‚îú –ë–∞–ª–∞–Ω—Å: ${user.balance}‚ÇΩ\n` +
            `‚îî –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: ${user.frozen_balance}‚ÇΩ\n\n` +
            `ü•≥–í–∞—à–∏ –ø—Ä–æ—Ñ–∏—Ç—ã\n` +
            `‚îó –°–¥–µ–ª–∞–Ω–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É ${user.profits}‚ÇΩ`

        // await bot.sendPhoto(chatId, "images/worker2.jpg", {
        //     caption: profile_text,
        //     parse_mode: "HTML",
        //     reply_markup: JSON.stringify({
        //         inline_keyboard: [
        //             [{text: "üí≤–û—Ñ–æ—Ä–º–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data: "make_payment"}],
        //             [{text: "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data: "settings"}]
        //         ]
        //     })
        // })

        await bot.sendMessage(chatId, profile_text, {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: buttons
            })});
    } else if (msg.text === "–û –ø—Ä–æ–µ–∫—Ç–µ üßë‚Äçüíª") {
        const text = "<b>üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è INFINITY TEAM</b>\n\n" +
            `<b>üë§ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞\n</b>` +
            `<b>‚î£ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 80%</b>\n` +
            `<b>‚î£ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¢–ü: 65%</b>\n` +
            `<b>‚îñ –û–±–Ω–∞–ª: 60%</b>\n\n` +
            "<b>üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–≥–∞ (3% —Å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞)</b>\n" +
            "‚îñ <a>https://t.me/InfTeamAppBot?start=984978132</a>\n\n" +
            `<b>üìà –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã</b>\n` +
            `<b>‚î£ ESCORT</b>\n` +
            `<b>‚î£ TRADE (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)</b>\n` +
            `<b>‚î£ NFT (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)</b>\n` +
            `<b>‚î£ CASINO (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)</b>\n` +
            `<b>‚îñ EXCHANGER (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)</b>`
        await bot.sendPhoto(chatId, "images/welcome.jpg", {
            caption: text,
            parse_mode: "HTML"
        })
    } else if (msg.text === "üíã ESCORT") {
        const user = await UserSchema.findOne({id_user: msg.from.id});
        let buttons = []
        if (user?.escort_model.length > 0) {
            buttons = user?.escort_model.map((bot, index) => {
                return [{ text: `${bot.name} ¬∑ ${bot.age}`, callback_data: `select_model_bot_${index}` }];
            });
        }
        buttons.push([{text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data: "add_model"}])
        let text = "<b>üíã ESCORT</b>\n\n" +
            "<b>ü§ñ –ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã:</b>\n" +
            "‚îñ <a href='https://t.me/MeganModelsEscortBot'>Megan Models</a>\n\n" +
            "<b>üë®‚Äçüíª –¢–ü:</b>\n" +
            "‚î† <a href='https://t.me/MeganModelsEscortSupport'>Megan Models Support</a>\n" +
            "‚îñ üëÆ(–ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º/–≤—ã–ø–ª–∞—Ç–∞–º–∏): @general_infinity\n\n" +
            "<b>üìö –ú–∞–Ω—É–∞–ª—ã:</b>\n" +
            "‚î† <a href='https://telegra.ph/Manual-po-ehskortu-08-12'>–ú–∞–Ω—É–∞–ª –≠—Å–∫–æ—Ä—Ç</a>\n" +
            "‚î† <a href='https://telegra.ph/Gde-iskat-mamontov-08-12-2' >–ì–¥–µ –∏—Å–∫–∞—Ç—å –º–∞–º–æ–Ω—Ç–æ–≤?</a>\n" +
            "‚îñ <a href='https://t.me/infinitiManuals'>–ö–∞–Ω–∞–ª —Å –º–∞–Ω—É–∞–ª–∞–º–∏</a>\n\n" +
            "<b>üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n" +
            `‚îñhttps://t.me/MeganModelsEscortBot?start=${user.id_user}`
        await bot.sendPhoto(chatId, "images/escort.jpg", {
            caption: text,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: buttons
            })
        })
    } else if (userState[chatId]?.step === "payment_amount") {
        let payment = msg.text
        const user = await UserSchema.findOne({id_user: msg.from.id})
        if (payment > user.balance) {
            await bot.sendMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        } else if (payment <= user.balance) {
            await bot.sendMessage(adminID, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${user.user_name} –æ—Ñ–æ—Ä–º–∏–ª –≤—ã–ø–ª–∞—Ç—É –Ω–∞ ${payment}`, {parse_mode: "HTML", reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "–î–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–≤–µ–ª ‚úÖ", callback_data: `money_send_${user.id_user}_${payment}`}],
                    ]
                }) })
            const userUpdate = await UserSchema.updateOne({id_user : msg.from.id}, {
                $set: {
                    balance: user.balance - +payment,
                    frozen_balance: user.frozen_balance + +payment
                }
            } )
            await bot.sendMessage(chatId, "‚úÖ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω")
        }
    } else if (userState[chatId]?.step === "add_model_name") {
        let text = "<b>üíã –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</b>\n\n" +
        `<b>–ò–º—è: ${msg.text}</b>`
        new_model_escort.name = msg.text
        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: escortAddModelMsgId.modelQues,
            parse_mode: 'HTML' // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        });
        await bot.deleteMessage(chatId, escortAddModelMsgId.messageDeleteUserId)
        await bot.deleteMessage(chatId, msg.message_id)
        let name_text_id = await bot.sendMessage(chatId, "üíÅ‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–≤–æ–∑—Ä–∞—Å—Ç</b> –¥–ª—è —ç—Å–∫–æ—Ä—Ç –º–æ–¥–µ–ª–∏", {parse_mode: "HTML"})
        escortAddModelMsgId.messageDeleteUserId = name_text_id.message_id
        userState[chatId] = {step: "add_model_age"}
    } else if (userState[chatId]?.step === "add_model_age") {
        let text = "<b>üíã –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</b>\n\n" +
            `<b>–ò–º—è: ${new_model_escort.name}</b>\n` +
            `<b>–í–æ–∑—Ä–∞—Å—Ç: ${msg.text}</b>\n`
        new_model_escort.age = msg.text
        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: escortAddModelMsgId.modelQues,
            parse_mode: 'HTML' // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        });
        await bot.deleteMessage(chatId, escortAddModelMsgId.messageDeleteUserId)
        await bot.deleteMessage(chatId, msg.message_id)
        let name_text_id  = await bot.sendMessage(chatId, "üí∏ –í–≤–µ–¥–∏—Ç–µ <b>—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —á–∞—Å</b> –¥–ª—è —ç—Å–∫–æ—Ä—Ç –º–æ–¥–µ–ª–∏", {parse_mode: "HTML"})
        escortAddModelMsgId.messageDeleteUserId = name_text_id.message_id
        userState[chatId] = {step: "add_model_prise_one_hour"}
    }  else if (userState[chatId]?.step === "add_model_prise_one_hour") {
        let text = "<b>üíã –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</b>\n\n" +
            `<b>–ò–º—è: ${new_model_escort.name}</b>\n` +
            `<b>–í–æ–∑—Ä–∞—Å—Ç: ${new_model_escort.age}</b>\n` +
            `<b>–¶–µ–Ω–∞ –∑–∞ —á–∞—Å: ${msg.text}</b>\n`
        new_model_escort.one_hour = msg.text
        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: escortAddModelMsgId.modelQues,
            parse_mode: 'HTML' // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        });
        await bot.deleteMessage(chatId, escortAddModelMsgId.messageDeleteUserId)
        await bot.deleteMessage(chatId, msg.message_id)
        let name_text_id = await bot.sendMessage(chatId, "üí∏ –í–≤–µ–¥–∏—Ç–µ <b>—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 2 —á–∞—Å–∞</b> –¥–ª—è —ç—Å–∫–æ—Ä—Ç –º–æ–¥–µ–ª–∏", {parse_mode: "HTML"})
        escortAddModelMsgId.messageDeleteUserId = name_text_id.message_id
        userState[chatId] = {step: "add_model_prise_two_hour"}
    } else if (userState[chatId]?.step === "add_model_prise_two_hour") {
        let text = "<b>üíã –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</b>\n\n" +
            `<b>–ò–º—è: ${new_model_escort.name}</b>\n` +
            `<b>–í–æ–∑—Ä–∞—Å—Ç: ${new_model_escort.age}</b>\n` +
            `<b>–¶–µ–Ω–∞ –∑–∞ —á–∞—Å: ${new_model_escort.one_hour}</b>\n` +
            `<b>–¶–µ–Ω–∞ –∑–∞ 2 —á–∞—Å–∞: ${msg.text}</b>\n`
        new_model_escort.two_hours = msg.text
        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: escortAddModelMsgId.modelQues,
            parse_mode: 'HTML' // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        });
        await bot.deleteMessage(chatId, escortAddModelMsgId.messageDeleteUserId)
        await bot.deleteMessage(chatId, msg.message_id)
        let name_text_id = await bot.sendMessage(chatId, "üí∏ –í–≤–µ–¥–∏—Ç–µ <b>—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –Ω–æ—á—å</b> –¥–ª—è —ç—Å–∫–æ—Ä—Ç –º–æ–¥–µ–ª–∏", {parse_mode: "HTML"})
        escortAddModelMsgId.messageDeleteUserId = name_text_id.message_id
        userState[chatId] = {step: "add_model_prise_tree_hour"}
    } else if (userState[chatId]?.step === "add_model_prise_tree_hour") {
        let text = "<b>üíã –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</b>\n\n" +
            `<b>–ò–º—è: ${new_model_escort.name}</b>\n` +
            `<b>–í–æ–∑—Ä–∞—Å—Ç: ${new_model_escort.age}</b>\n` +
            `<b>–¶–µ–Ω–∞ –∑–∞ —á–∞—Å: ${new_model_escort.one_hour}</b>\n` +
            `<b>–¶–µ–Ω–∞ –∑–∞ 2 —á–∞—Å–∞: ${new_model_escort.two_hours}</b>\n` +
            `<b>–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å: ${msg.text}</b>\n`
        new_model_escort.all_night = msg.text
        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: escortAddModelMsgId.modelQues,
            parse_mode: 'HTML' // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        });
        await bot.deleteMessage(chatId, escortAddModelMsgId.messageDeleteUserId)
        await bot.deleteMessage(chatId, msg.message_id)
        let name_text_id = await bot.sendMessage(chatId, "üíÉ –í–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –¥–ª—è —ç—Å–∫–æ—Ä—Ç –º–æ–¥–µ–ª–∏", {parse_mode: "HTML"})
        escortAddModelMsgId.messageDeleteUserId = name_text_id.message_id
        userState[chatId] = {step: "add_model_description"}
    } else if (userState[chatId]?.step === "add_model_description") {
        let text = "<b>üíã –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</b>\n\n" +
            `<b>–ò–º—è: ${new_model_escort.name}</b>\n` +
            `<b>–í–æ–∑—Ä–∞—Å—Ç: ${new_model_escort.age}</b>\n` +
            `<b>–¶–µ–Ω–∞ –∑–∞ —á–∞—Å: ${new_model_escort.one_hour}</b>\n` +
            `<b>–¶–µ–Ω–∞ –∑–∞ 2 —á–∞—Å–∞: ${new_model_escort.two_hours}</b>\n` +
            `<b>–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å: ${new_model_escort.all_night}</b>\n` +
            `<b>–û–ø–∏—Å–∞–Ω–∏–µ: ${msg.text}</b>\n`
        new_model_escort.description = msg.text
        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: escortAddModelMsgId.modelQues,
            parse_mode: 'HTML' // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        });
        await bot.deleteMessage(chatId, escortAddModelMsgId.messageDeleteUserId)
        await bot.deleteMessage(chatId, msg.message_id)
        let name_text_id = await bot.sendMessage(chatId, "üçì –í–≤–µ–¥–∏—Ç–µ <b>–≤–∏–¥—ã —É—Å–ª—É–≥</b> –¥–ª—è —ç—Å–∫–æ—Ä—Ç –º–æ–¥–µ–ª–∏", {parse_mode: "HTML"})
        escortAddModelMsgId.messageDeleteUserId = name_text_id.message_id
        userState[chatId] = {step: "types_of_services"}
    } else if (userState[chatId]?.step === "types_of_services") {
        let text = "<b>üíã –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</b>\n\n" +
            `<b>–ò–º—è: ${new_model_escort.name}</b>\n` +
            `<b>–í–æ–∑—Ä–∞—Å—Ç: ${new_model_escort.age}</b>\n` +
            `<b>–¶–µ–Ω–∞ –∑–∞ —á–∞—Å: ${new_model_escort.one_hour}</b>\n` +
            `<b>–¶–µ–Ω–∞ –∑–∞ 2 —á–∞—Å–∞: ${new_model_escort.two_hours}</b>\n` +
            `<b>–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å: ${new_model_escort.all_night}</b>\n` +
            `<b>–û–ø–∏—Å–∞–Ω–∏–µ: ${new_model_escort.description}</b>\n` +
            `<b>–£—Å–ª—É–≥–∏: ${msg.text}</b>\n`
        new_model_escort.types_of_servises = msg.text
        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: escortAddModelMsgId.modelQues,
            parse_mode: 'HTML' // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        });
        await bot.deleteMessage(chatId, escortAddModelMsgId.messageDeleteUserId)
        await bot.deleteMessage(chatId, msg.message_id)
        let messageText = "<b>üéû –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ</b> –¥–ª—è —ç—Å–∫–æ—Ä—Ç –º–æ–¥–µ–ª–∏\n\n" +
            "–¢—Ä–µ–±—É—é—Ç—Å—è 5 —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ –≤ —Å–µ—Ä–≤–∏—Å–µ <a href='https://telegra.ph/'>telegra.ph</a> —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n" +
            "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç <a href='https://t.me/Uploader_Telegraph_bot' >Uploader Telegraph</a>.\n\n" +
            "–ü—Ä–∏–º–µ—Ä:\n" +
            "https://telegra.ph/file/400c520cd42174abdf141.jpg, https://telegra.ph/file/d2d8d7702e65e4d77018c.jpg, https://telegra.ph/file/f82e47b37c0b4fcf29dae.jpg, https://telegra.ph/file/9b4d562b1232cd8e7ca12.jpg, https://telegra.ph/file/1b243a596cdd134f013fe.jpg"

        let name_text_id = await bot.sendMessage(chatId, messageText, {parse_mode: "HTML"})
        escortAddModelMsgId.messageDeleteUserId = name_text_id.message_id
        userState[chatId] = {step: "add_model_photo"}
    } else if (userState[chatId]?.step === "add_model_photo") {
        let text = "<b>–ù–æ–≤–∞—è —ç—Å–∫–æ—Ä—Ç –º–æ–¥–µ–ª—å\n</b>\n\n" +
            `<b>–ò–º—è: ${new_model_escort.name}</b>\n` +
            `<b>–í–æ–∑—Ä–∞—Å—Ç: ${new_model_escort.age}</b>\n` +
            `<b>–¶–µ–Ω–∞ –∑–∞ —á–∞—Å: ${new_model_escort.one_hour}</b>\n` +
            `<b>–¶–µ–Ω–∞ –∑–∞ 2 —á–∞—Å–∞: ${new_model_escort.two_hours}</b>\n` +
            `<b>–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å: ${new_model_escort.all_night}</b>\n` +
            `<b>–û–ø–∏—Å–∞–Ω–∏–µ: ${new_model_escort.description}</b>\n` +
            `<b>–£—Å–ª—É–≥–∏: ${new_model_escort.types_of_servises}</b>\n` +
            `<b>–§–æ—Ç–æ: ${msg.text}</b>\n`
        let photos_arr  = msg.text.split(", ")
        new_model_escort.photos = photos_arr
        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: escortAddModelMsgId.modelQues,
            parse_mode: 'HTML' // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        });
        await bot.deleteMessage(chatId, escortAddModelMsgId.messageDeleteUserId)
        await bot.deleteMessage(chatId, msg.message_id)
        await bot.sendMessage(chatId, text, {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: "confirm_new_model"}],
                    [{text: "–û—Ç–º–µ–Ω–∞", callback_data: "cancel_new_model"}]
                ]
            })});

    } else if (userState[chatId]?.step === "change_current_model_name") {
        const user = await UserSchema.findOne({id_user: msg.from.id});
        user.escort_model[userState[chatId].model_index].name = msg.text;
        await UserSchema.updateOne({id_user: msg.from.id}, {
            $set: {
                escort_model: user.escort_model
            }
        })
        await bot.sendMessage(chatId, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚úÖ")
    } else if (userState[chatId]?.step === "change_current_model_age") {
        const user = await UserSchema.findOne({id_user: msg.from.id});
        user.escort_model[userState[chatId].model_index].age = msg.text;
        await UserSchema.updateOne({id_user: msg.from.id}, {
            $set: {
                escort_model: user.escort_model
            }
        })
        await bot.sendMessage(chatId, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚úÖ")
    } else if (userState[chatId]?.step === "change_current_model_hour") {
        const user = await UserSchema.findOne({id_user: msg.from.id});
        user.escort_model[userState[chatId].model_index].price.hour = msg.text;
        await UserSchema.updateOne({id_user: msg.from.id}, {
            $set: {
                escort_model: user.escort_model
            }
        })
        await bot.sendMessage(chatId, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚úÖ")
    } else if (userState[chatId]?.step === "change_current_model_two_hours") {
        const user = await UserSchema.findOne({id_user: msg.from.id});
        user.escort_model[userState[chatId].model_index].price.two_hours = msg.text;
        await UserSchema.updateOne({id_user: msg.from.id}, {
            $set: {
                escort_model: user.escort_model
            }
        })
        await bot.sendMessage(chatId, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚úÖ")
    } else if (userState[chatId]?.step === "change_current_model_all_night") {
        const user = await UserSchema.findOne({id_user: msg.from.id});
        user.escort_model[userState[chatId].model_index].price.all_night = msg.text;
        await UserSchema.updateOne({id_user: msg.from.id}, {
            $set: {
                escort_model: user.escort_model
            }
        })
        await bot.sendMessage(chatId, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚úÖ")
    } else if (userState[chatId]?.step === "change_current_model_description") {
        const user = await UserSchema.findOne({id_user: msg.from.id});
        user.escort_model[userState[chatId].model_index].description = msg.text;
        await UserSchema.updateOne({id_user: msg.from.id}, {
            $set: {
                escort_model: user.escort_model
            }
        })
        await bot.sendMessage(chatId, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚úÖ")
    } else if (userState[chatId]?.step === "change_current_model_services") {
        const user = await UserSchema.findOne({id_user: msg.from.id});
        const curators = await CuratorSchema.find()
        let curator_is_added = false
        const curator = await CuratorSchema.findOne({id_user: ourCuratorID})
        curator.users.forEach(user => {
            if (user.id_user === msg.from.id) {
                curator_is_added = true
            }
        })
        user.escort_model[userState[chatId].model_index].services = msg.text;
        await UserSchema.updateOne({id_user: msg.from.id}, {
            $set: {
                escort_model: user.escort_model
            }
        })


        await bot.sendMessage(chatId, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚úÖ")
    } else if (userState[chatId]?.step === "transfer_money_to_user") {
        let curator_is_added = false;
        let delete_curator_index = false;
        let user_curator_index = 0;
        const curators = await CuratorSchema.find()
        let usersItems = curators[0].users.map((user, index) => {
            if (user.id_user == userState[chatId].userId) {
                curator_is_added = true
                if (user.profits >= 4) {
                    user_curator_index = index;
                    delete_curator_index = true
                } else if (user.profits < 5) {
                    console.log(index)
                    user.profits = user.profits+1;
                    return user;
                } else if (user.profits === 5) {
                }
            }
        })
        if (delete_curator_index) {
            usersItems.splice(user_curator_index, 1);
        }
        if (curator_is_added) {
            await CuratorSchema.updateOne({id_user: curators[0].id_user}, {
                $set: {
                    users: usersItems
                }
            })
        }
        const text = `<b>üí∞–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–æ—Ñ–∏—Ç–æ–º!</b>\n\n` +
            `–°—É–º–∞ –ø—Ä–æ—Ñ–∏—Ç–∞: <b>${msg.text}‚ÇΩ</b>\n` +
            `–°–µ—Ä–≤–∏—Å: <b>ESCORT</b>\n\n` +
            `<b>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! ü•∞</b>`
       await bot.sendMessage(userState[chatId].userId, text, {parse_mode: "HTML"})
        const user = await UserSchema.findOne({id_user: userState[chatId].userId})
        await UserSchema.updateOne({id_user: userState[chatId].userId}, {
            $set: {
                balance: +user.balance + +msg.text,
                profits: +user.profits + +msg.text
            }
        })
        const profit_text = "<b> –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: </b>\n" +
            `<b>‚îú –°—É–º–º–∞: ${msg.text} RUB</b>\n` +
            `<b>‚îú –°–µ—Ä–≤–∏—Å: ESCORT</b>\n` +
            `<b>‚îî –í–æ—Ä–∫–µ—Ä: @${user.user_name}</b>`
        console.log(userState[chatId].userId)
        if (userState[chatId].userId == ourCuratorID) {
            await bot.sendMessage(chatId, "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å —Å–¥–µ–ª–∞–Ω ‚úÖ")

        } else if (userState[chatId].userId != ourCuratorID) {
            await bot.sendMessage(profitsChatId, profit_text, {parse_mode: "HTML"})
            await bot.sendMessage(chatId, "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å —Å–¥–µ–ª–∞–Ω ‚úÖ")
        }



    }
})





bot.on("callback_query", async (msg) => {
    const chatId = msg.message.chat.id;
    const callbackData = msg.data;
    console.log(msg.data)
    if (msg.data === "make_payment") {
        await bot.deleteMessage(chatId, msg.message.message_id)
        await bot.sendMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏:")
        userState[chatId] = {step: "payment_amount"}
    } else if (msg.data === "add_model") {
        await bot.deleteMessage(chatId, msg.message.message_id)
        const model_ques = await bot.sendMessage(chatId, "<b>üíã –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</b>", {parse_mode: "HTML"})
        let add_model_text_name = "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –º–æ–¥–µ–ª—å. –û–Ω–∞ –±—É–¥–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –∑–∞ –≤–∞–º–∏ –∏ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥ –≤–∞—à–∏–º –º–∞–º–æ–Ω—Ç–∞–º.\n\n" +
            "üôã‚Äç‚ôÄÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–∏–º—è</b> –º–æ–¥–µ–ª–∏"
        const bot_add_model_name = await bot.sendMessage(chatId, add_model_text_name, {parse_mode: "HTML"})
        escortAddModelMsgId = {
            messageDeleteUserId: bot_add_model_name.message_id,
            modelQues: model_ques.message_id
        }
        userState[chatId] = {step: "add_model_name"}
    } else if (msg.data === "cancel_new_model") {
        await bot.deleteMessage(chatId, msg.message.message_id)
        const user = await UserSchema.findOne({id_user: msg.from.id});
        let buttons = []
        if (user?.escort_model.length > 0) {
            buttons = user?.escort_model.map((bot, index) => {
                return [{ text: `${bot.name} ¬∑ ${bot.age}`, callback_data: `select_model_bot_${index}` }];
            });
        }
        buttons.push([{text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data: "add_model"}])
        let text = "<b>üíã ESCORT</b>\n\n" +
            "<b>ü§ñ –ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã:</b>\n" +
            "‚îñ <a href='https://t.me/MeganModelsEscortBot'>Megan Models</a>\n\n" +
            "<b>üë®‚Äçüíª –¢–ü:</b>\n" +
            "‚î† <a href='https://t.me/MeganModelsEscortSupport'>Megan Models Support</a>\n" +
            "‚îñ üëÆ(–ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º/–≤—ã–ø–ª–∞—Ç–∞–º–∏): @general_infinity\n\n" +
            "<b>üìö –ú–∞–Ω—É–∞–ª—ã:</b>\n" +
            "‚î† <a href='https://telegra.ph/Manual-po-ehskortu-08-12'>–ú–∞–Ω—É–∞–ª –≠—Å–∫–æ—Ä—Ç</a>\n" +
            "‚î† <a href='https://telegra.ph/Gde-iskat-mamontov-08-12-2' >–ì–¥–µ –∏—Å–∫–∞—Ç—å –º–∞–º–æ–Ω—Ç–æ–≤?</a>\n" +
            "‚îñ <a href='https://t.me/infinitiManuals'>–ö–∞–Ω–∞–ª —Å –º–∞–Ω—É–∞–ª–∞–º–∏</a>\n\n" +
            "<b>üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n" +
            `‚îñhttps://t.me/MeganModelsEscortBot?start=${user.id_user}`
        await bot.sendPhoto(chatId, "images/escort.jpg", {
            caption: text,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: buttons
            })
        })
    } else if (msg.data === "confirm_new_model") {
        await bot.deleteMessage(chatId, msg.message.message_id)
        const user = await UserSchema.findOne({id_user: msg.from.id})
        user?.escort_model.push({
            name: new_model_escort.name,
            age: new_model_escort.age,
            price: {
                hour: new_model_escort.one_hour,
                two_hours: new_model_escort.two_hours,
                all_night: new_model_escort.all_night
            },
            photos: [new_model_escort.photos[0], new_model_escort.photos[1], new_model_escort.photos[2], new_model_escort.photos[3], new_model_escort.photos[4]],
            description: new_model_escort.description,
            services: new_model_escort.types_of_servises
        })
        await UserSchema.updateOne({id_user: msg.from.id}, {
            $set: { escort_model: user?.escort_model
            }
        })
        await bot.sendMessage(chatId, "‚úÖ –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    } else if (callbackData.startsWith('select_model_bot_')) {
        await bot.deleteMessage(chatId, msg.message.message_id);

        const user = await UserSchema.findOne({id_user: msg.from.id});
        const botId = callbackData.replace('select_model_bot_', '');

        await bot.sendMessage(chatId, `<b>–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:</b>`, {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "–ò–º—è", callback_data: "change_current_model_name"}],
                    [{text: "–í–æ–∑—Ä–∞—Å—Ç", callback_data: "change_current_model_age"}],
                    [{text: "–¶–µ–Ω–∞ –∑–∞ —á–∞—Å", callback_data: "change_current_model_hour"}],
                    [{text: "–¶–µ–Ω–∞ –∑–∞ 2 —á–∞—Å–∞", callback_data: "change_current_model_two_hours"}],
                    [{text: "–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å", callback_data: "change_current_model_all_night"}],
                    [{text: "–û–ø–∏—Å–∞–Ω–∏–µ", callback_data: "change_current_model_description"}],
                    [{text: "–§–æ—Ç–æ", callback_data: "change_current_model_photo"}],
                    [{text: "–£—Å–ª—É–≥–∏", callback_data: "change_current_model_services"}],
                    [{text: "‚ùå –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data: "change_current_model_delete"}],
                    [{text: "‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data: "cancel_new_model"}],
                ]
        })});
        userState[chatId] = {step: "", model_index: botId};
    } else if (msg.data === "change_current_model_name") {
        await bot.sendMessage(chatId, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: </b>", {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data: "cancel_new_model"}]
                ]
            })})
        userState[chatId].step = "change_current_model_name"
    } else if (msg.data === "change_current_model_age") {
        await bot.sendMessage(chatId, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: </b>", {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data: "cancel_new_model"}]
                ]
            })})
        userState[chatId].step = "change_current_model_age"
    } else if (msg.data === "change_current_model_hour") {
        await bot.sendMessage(chatId, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: </b>", {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data: "cancel_new_model"}]
                ]
            })})
        userState[chatId].step = "change_current_model_hour"
    } else if (msg.data === "change_current_model_two_hours") {
        await bot.sendMessage(chatId, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: </b>", {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data: "cancel_new_model"}]
                ]
            })})
        userState[chatId].step = "change_current_model_two_hours"
    } else if (msg.data === "change_current_model_all_night") {
        await bot.sendMessage(chatId, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: </b>", {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data: "cancel_new_model"}]
                ]
            })})
        userState[chatId].step = "change_current_model_all_night"
    } else if (msg.data === "change_current_model_description") {
        await bot.sendMessage(chatId, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: </b>", {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data: "cancel_new_model"}]
                ]
            })})
        userState[chatId].step = "change_current_model_description"
    } else if (msg.data === "change_current_model_photo") {
        await bot.sendMessage(chatId, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: </b>", {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data: "cancel_new_model"}]
                ]
            })})
        userState[chatId].step = "change_current_model_photo"
    }  else if (msg.data === "change_current_model_services") {
        await bot.sendMessage(chatId, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: </b>", {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data: "cancel_new_model"}]
                ]
            })})
        userState[chatId].step = "change_current_model_services"
    } else if (msg.data === "change_current_model_delete") {
        const user = await UserSchema.findOne({id_user: msg.from.id});
        user.escort_model.splice(userState[chatId].model_index, 1);
        console.log(user.escort_model)
        await UserSchema.updateOne({id_user: msg.from.id}, {
            $set: {
                escort_model: user.escort_model
            }
        })
        await bot.deleteMessage(chatId, msg.message.message_id)
        await bot.sendMessage(chatId, "–ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞ ‚úÖ")
    } else if (msg.data.startsWith("transfer_money_")) {
        const [userId] = msg.data.replace('transfer_money_', '').split('_');
        await bot.sendMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ —Å—É–º—É –ø–µ—Ä–µ–≤–æ–¥–∞: ")
        userState[chatId] = {
            step: "transfer_money_to_user",
            userId: userId
        }
    } else if (msg.data.startsWith("money_send_")) {
        const [id, balance] = msg.data.replace('money_send_', '').split('_');
        const user = await UserSchema.findOne({id_user: id})
        await UserSchema.updateOne({id_user: id}, {
            $set: {
                frozen_balance: user.frozen_balance - balance
            }
        })
        await bot.sendMessage(adminID, `${user.name} –ø–æ–ª—É—á–∏–ª —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏ `)
    } else if (msg.data === "add_curator") {
        await bot.deleteMessage(chatId, msg.message.message_id);
        const curators = await CuratorSchema.find()
        let  buttons = curators.map(curator => {
            return [{text: `${curator.name} | ${curator.interest}% | ${curator.work}`, callback_data: `thosen_curator_${curator.id_user}`}]
        })
        await bot.sendMessage(chatId, "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä–∞—Ç–æ—Ä—ã: </b>", {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: buttons
            })})
    } else if (msg.data.startsWith("thosen_curator_")) {
        const [curatorId] = msg.data.replace('thosen_curator_', '').split('_');
        const curator = await CuratorSchema.findOne({id_user: curatorId})
        await bot.deleteMessage(chatId, msg.message.message_id)
        await bot.sendMessage(chatId, `${curator.name} –Ω–∞—É—á–∏—Ç –≤–∞—Å —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ ${curator.work} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é. –ö—É—Ä–∞—Ç–æ—Ä –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∞ –≤–∞—à–∏ –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–æ—Ñ–∏—Ç–æ–º, —Å –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ –æ–Ω –±—É–¥–µ—Ç –∑–∞–±–∏—Ä–∞—Ç—å ${curator.interest}%`, {
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–æ", callback_data: `add_curator_to_me_${curator.id_user}`}],
                    [{text: "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—É", url: `https://t.me/${curator.user_name}`}]
                ]
            })
        })
    } else if (msg.data.startsWith("add_curator_to_me_")) {
       try {
           const [curatorId] = msg.data.replace('add_curator_to_me_', '').split('_');
           await bot.deleteMessage(chatId, msg.message.message_id)
           let curator_is_added = false
           const curator = await CuratorSchema.findOne({id_user: curatorId})
           curator.users.forEach(user => {
               if (user.id_user === msg.from.id) {
                   curator_is_added = true
               }
           })
           if (curator_is_added) {
               await bot.sendMessage(chatId, "üö´ –ö—É—Ä–∞—Ç–æ—Ä —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω")
           } else if (curator_is_added === false) {
               curator.users.push({
                   id_user: msg.from.id,
                   name: msg.from.first_name,
                   user_name: msg.from.username,
                   profits: 0
               })
               await CuratorSchema.updateOne({id_user: curatorId}, {
                   $set: {
                       users: curator.users
                   }
               })
               await bot.sendMessage(chatId, "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞")
               await bot.sendMessage(ourCuratorID, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${msg.from.username} –æ—Ñ–æ—Ä–º–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –∫—É—Ä—Ç–∞—Ç–æ—Ä—Å—Ç–≤–æ`)
           }
       } catch (e) {
           console.log(e)
       }

    } else if (msg.data === "my_curator"){
        const curators = await CuratorSchema.find()
        curators[0].users.forEach(user => {
            if (user.id_user === msg.from.id) {
                bot.sendMessage(chatId, `–ö—É—Ä–∞—Ç–æ—Ä ${curators[0].name} –±—É–¥–µ—Ç –æ—Ç–≤—è–∑–∞–Ω –ø–æ—Å–ª–µ 5 –ø—Ä–æ—Ñ–∏—Ç–æ–≤. <b>–í–∞—à–∏ –ø—Ä–æ—Ñ–∏—Ç—ã - ${user.profits}</b>`, {parse_mode: "HTML", reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{text: "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—É", url: `https://t.me/${curators[0].user_name}`}]
                        ]
                    })})
            }
        })
    }

})
